# Place a new order
Function CreateOrder:
    If request body is invalid:
        Return HTTP 400 Bad Request with message "Invalid request data"

    orderID = saveOrder(userID, items, shippingAddress, paymentMode)
    If orderID is null:
        Return HTTP 500 Internal Server Error with message "Failed to create order"

    publishEvent("order.placed", {
        order_id: orderID,
        user_id: userID,
        items: items,
        shipping_address: shippingAddress,
        payment_mode: paymentMode
    })

    Return HTTP 201 Created with data: { message: "Order placed", order_id: orderID }






# Get current user's orders
Function GetUserOrders:
    If userID is missing:
        Return HTTP 401 Unauthorized with message "User not authenticated"

    orders = fetchOrdersByUserID(userID)
    If error while fetching:
        Return HTTP 500 Internal Server Error with message "Failed to retrieve orders"

    Return HTTP 200 OK with data: orders






# Get specific order details
Function GetOrderDetails(orderID):
    If userID is missing:
        Return HTTP 401 Unauthorized with message "User not authenticated"

    order = fetchOrderByID(orderID)
    If order is not found:
        Return HTTP 404 Not Found with message "Order not found"

    If order.userID != currentUserID:
        Return HTTP 403 Forbidden with message "Access denied"

    Return HTTP 200 OK with data: order






# Cancel an order
Function CancelOrder(orderID):
    order = fetchOrderByID(orderID)
    If order not found OR order.userID != currentUserID:
        Return HTTP 403 Forbidden with message "Not authorized to cancel this order"

    If orderStatus not in ["pending", "processing"]:
        Return HTTP 400 Bad Request with message "Order cannot be cancelled"

    result = updateOrderStatus(orderID, "cancelled")
    If result is error:
        Return HTTP 500 Internal Server Error with message "Failed to cancel order"

    publishEvent("order.cancelled", {
        order_id: orderID,
        user_id: currentUserID
    })

    Return HTTP 200 OK with message "Order cancelled"






# Update order status
Function UpdateOrderStatus(orderID):
    If requester is not authorized:
        Return HTTP 403 Forbidden with message "Unauthorized to update order status"

    newStatus = parseStatusFromRequest()
    If newStatus is invalid:
        Return HTTP 400 Bad Request with message "Invalid order status"

    result = updateOrderStatus(orderID, newStatus)
    If result is error:
        Return HTTP 500 Internal Server Error with message "Failed to update status"

    publishEvent("order.status_updated", {
        order_id: orderID,
        status: newStatus
    })

    Return HTTP 200 OK with message "Order status updated"






# Delete order
Function DeleteOrder(orderID):
    order = fetchOrderByID(orderID)
    If order not found OR (order.userID != currentUserID AND userRole != "admin"):
        Return HTTP 403 Forbidden with message "Not authorized to delete this order"

    result = softDeleteOrder(orderID)
    If result is error:
        Return HTTP 500 Internal Server Error with message "Failed to delete order"

    Return HTTP 200 OK with message "Order deleted"
